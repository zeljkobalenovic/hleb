Starting point :
KORAK 2 - GOTOVO

Modelovanje BAZE (MySQL) i entiteta-klasa(Spring Boot)
======================================================

3 osnovna nacina navedena u application.properties

izmodelovao sam celu bazu hleb u workbenchu mysql (sve model i crtez dijagram) sa tabelama koje imam u spring boot (security 5 tabela) kao i sa novim tabelama potrebnim za projekat ( jos 7 tabela ) i malo sam se poigrao sa sva 3 nacina

Napomena u vezi modelovanja u mysql - za 1-1 i 1-n koristiti nonidentifying relacije (ako stavim identifying onda dodaje pk 1 strane u pk n strane ) , pa je pk n strane svojid+1straneid, a ja hocu da pk n strane bude samo id te strane , a pk 1 strane da bude fk n strane. Kod n na n relacija svakako ide identifying.

VAZNO :
NACIN 1 - sve uraditi u mysql - radi ok - po ocekivanju (za ovo treba u application propertiess) staviti 
ddl-auto na NONE (idealno ) ili UPDATE (radi kako treba , ali recimo dodaje u user constrainte unique koje sam ja vec izmodelovao u mysql pa se duplira ). Takodje datasource-initialization na always - prvi put , pa posle never 
NACIN 2 - sve iz spring boot - probano sa ovih 5 tabela i radi u koraku 2 - ali nije pogodno za ceo projekat
nacin 3 - pomocu schema.sql (ovo super radi samostalno - kad su sve tabele u schema.sql)

Probao sam i mesavinu (schema.sql pravi neke fajlove , pa onda nastavi spring boot , moze ali nije prakticno , tj. nemoze ako postoje relacije izmedju tabela u te dve grupe )
ZAKLJUCAK 
=========
NAJBOLJI NACIN : 
Bazu modelujem u cistom mysql-workbenchu , zatim sacuvam model sa promenama , pa izvezem sql script modela u schema.sql spring boot i tako u krug dok se nezavrsi razvoj. Bazu uvek inicijalizujem - always ( pustim oba sql - schema i data). Kad sam zadovoljan vratim inicijalizaciju na never i radim u spring boot , do sledeceg kruga 
VAZNO ddl-auto stalno drzati na none , da nebi pametovao i menjao bazu posle schema.sql ( a moze to da radi )

Kad dodajem nove entitete ili atribute entiteta - obavezno i u scheme.sql da bi bilo upareno (kad se sledeci put pusti inicijalizacija baze). Nije obavezno ali je cistije tako. Ako samo menjam modele (entity i atribute entity) baza se takodje menja ,
ali schema.sql se ne menja pa pri sledecoj kreaciji baze od nule ide mix - prvo pusti schema.sql pa onda doteruje razlike iz spring jpa sto nije predvidivo . 
ZAKLJUCAK
=========
VAZNO - izmene : dodati nove entitete ili atribute entiteta u schema.sql i u spring paralelno 

VAZNO !!! KONTROLU VRSIM TAKO STO PUSTIM INICIJALIZACIJU ( schema.sql i data.sql ) i GLEDAM KONZOLU :
AKO JE SVE U REDU ( tj. entiteti su u vinklu sa sql tabelama ) NECE BITI DODATNIH SQL STATMENTA U KONZOLI PRI STARTU APP

VAZNO !!! Puno je lakse sve praviti u mysqlworkbench nego podesavati sve sa @Table i @Column i @JoinColumn (bukvalno koristim samo name da bi usaglasio javu-camelcase i mysql razdvaja donjom crtom ) Sve ostalo izbegavati u javi tj. koristiti mysql i schema.sql

IZUZETAK : tabele za pracenje istorija necu praviti u mysql i nece ih biti u schema.sql nego ce SAMO njih praviti spring data enver modul ( dodatni modul za nadgledanje tabela - evidentira SVE promene na SVIM zapisima ZELJENIH ( ili SVIH ) tabela.
